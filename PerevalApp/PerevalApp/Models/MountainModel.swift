import Foundation

class Mountain {
    // MARK: - Properties
    var isSelected: Bool
    var title: String
    var message: String
    var status: Status
    
    private var goUpPhotos: [[Photo]] = [[],[],[]]          // [["–ü–æ–¥—ä—ë–º"], ["–ü–µ—Ä–µ–≤–∞–ª—å–Ω—ã–π –≤–∑–ª—ë—Ç"], ["–°–µ—Ä–µ–¥–∏–Ω–∞ –ø–æ–¥—ä—ë–º–∞"]]
    private var passPointPhotos: [[Photo]] = [[],[],[],[]]  // [["–°–µ–¥–ª–æ–≤–∏–Ω–∞"], ["–¢—É—Ä"], ["–ó–∞–ø–∏—Å–∫–∞"], ["–ì—Ä—É–ø–ø–∞ –Ω–∞ –ø–µ—Ä–µ–≤–∞–ª–µ"]
    private var goDownPhotos: [[Photo]] = [[],[],[]]        // [["–°–ø—É—Å–∫"], ["–ü–µ—Ä–µ–≤–∞–ª—å–Ω—ã–π –≤–∑–ª—ë—Ç (–æ–±—Ä–∞—Ç–Ω–æ)"], ["–°–µ—Ä–µ–¥–∏–Ω–∞ —Å–ø—É—Å–∫–∞"]]
    
    var statisticText: String {
        return "\(goUpPhotosCountText) \(passPointPhotosCountText) \(goDownPhotosCountText)"
    }
    
    var photosCount: Int {
        var count = 0
        goUpPhotos.forEach { count += $0.count }
        passPointPhotos.forEach { count += $0.count }
        goDownPhotos.forEach { count += $0.count }
        return count
    }
    
    private var goUpPhotosCountText: String {
        var count = 0
        goUpPhotos.forEach { count += $0.count }
        let text = "–ü–æ–¥—ä—ë–º \(count)/\(goUpPhotos.count)"
        return text
    }
    
    private var passPointPhotosCountText: String {
        var count = 0
        passPointPhotos.forEach { count += $0.count }
        let text = "–°–µ–¥–ª–æ–≤–∏–Ω–∞ \(count)/\(passPointPhotos.count)"
        return text
    }
    
    private var goDownPhotosCountText: String {
        var count = 0
        goDownPhotos.forEach { count += $0.count }
        let text = "–°–ø—É—Å–∫ \(count)/\(goDownPhotos.count)"
        return text
    }
    
    
    // MARK: - Init
    init(isSelected: Bool = false,
         title: String,
         message: String,
         status: Status = Status(type: .template,
                                 lastUpdateDate: nil,
                                 message: nil)) {
        self.isSelected = isSelected
        self.title = title
        self.message = message
        self.status = status
    }
    
    // MARK: - Public Methods
    func setPhoto(photo: Photo) {
        print("üü† Will set photoIndex: \(photo.index)")
        switch photo.index {
        case 0:
            goUpPhotos[0].append(photo) // ["–ü–æ–¥—ä—ë–º"]
        case 1:
            goUpPhotos[1].append(photo) // ["–ü–µ—Ä–µ–≤–∞–ª—å–Ω—ã–π –≤–∑–ª—ë—Ç"]
        case 2:
            goUpPhotos[2].append(photo) // ["–°–µ—Ä–µ–¥–∏–Ω–∞ –ø–æ–¥—ä—ë–º–∞"]
        case 3:
            passPointPhotos[0].append(photo) // ["–°–µ–¥–ª–æ–≤–∏–Ω–∞"]
        case 4:
            passPointPhotos[1].append(photo) // ["–¢—É—Ä"]
        case 5:
            passPointPhotos[2].append(photo) // ["–ó–∞–ø–∏—Å–∫–∞"]
        case 6:
            passPointPhotos[3].append(photo) // ["–ì—Ä—É–ø–ø–∞ –Ω–∞ –ø–µ—Ä–µ–≤–∞–ª–µ"]
        case 7:
            goDownPhotos[0].append(photo) // ["–°–ø—É—Å–∫"]
        case 8:
            goDownPhotos[1].append(photo) // ["–ü–µ—Ä–µ–≤–∞–ª—å–Ω—ã–π –≤–∑–ª—ë—Ç (–æ–±—Ä–∞—Ç–Ω–æ)"]
        case 9:
            goDownPhotos[2].append(photo) // ["–°–µ—Ä–µ–¥–∏–Ω–∞ —Å–ø—É—Å–∫–∞"]
        default:
            break
        }
    }
    
    func getCountFor(section: Int, row: Int) -> Int {
        switch section {
        case 0:
            return goUpPhotos[row].count
        case 1:
            return passPointPhotos[row].count
        case 2:
            return goDownPhotos[row].count
        default:
            return 0
        }
    }
}

// MARK: - Status
struct Status {
    enum StatusType {
        case template       // —á–µ—Ä–Ω–æ–≤–∏–∫ –∏–ª–∏ —Ç–æ—Ç, —á—Ç–æ —É–∂–µ –≥–æ—Ç–æ–≤–æ, –Ω–æ –Ω–∏ —Ä–∞–∑—É –Ω–µ –ø—Ä–æ–±–æ–≤–∞–ª–∏ –≤—ã—Å—ã–ª–∞—Ç—å
        case new            // –Ω–∞—Ö–æ–¥—è—â–∏–π—Å—è –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É
        case pending        // –ø—Ä–∏–Ω—è—Ç–æ - –µ—Å–ª–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –≤–∑—è–ª –≤ —Ä–∞–±–æ—Ç—É
        case accepted       // –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ - resolved —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        case rejected       // –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ - resolved —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    }
    
    // MARK: - Properties
    var type: StatusType
    var lastUpdateDate: String?
    var message: String?
}

// MARK: - Photo
struct Photo {
    var index: Int
    var url: String
    var title: String
}

// MARK: - MountainModel
class MountainModel {
    // MARK: - Mock Data:
    private var mountain0 = Mountain(isSelected: false,
                                     title: "Mountain0",
                                     message: "2020-09-01")
    
    private var mountain1 = Mountain(isSelected: false,
                                     title: "Mountain1",
                                     message: "2020-09-01")
    
    private var mountain2 = Mountain(isSelected: false,
                                     title: "Mountain2",
                                     message: "2020-09-01")
    
    private var mountain3 = Mountain(isSelected: false,
                                     title: "Mountain3",
                                     message: "2020-09-01")
    
    private var mountain4 = Mountain(isSelected: false,
                                     title: "Mountain4",
                                     message: "2020-09-01")
    
    private var mountain5 = Mountain(isSelected: false,
                                     title: "Mountain5",
                                     message: "2020-09-01")
    
    private var mountain6 = Mountain(isSelected: false,
                                     title: "Mountain6",
                                     message: "2020-09-01")
    
    private var mountain7 = Mountain(isSelected: false,
                                     title: "Mountain7",
                                     message: "2020-09-01")
    
    private var mountain8 = Mountain(isSelected: false,
                                     title: "Mountain8",
                                     message: "2020-09-01")
    
    private var mountain9 = Mountain(isSelected: false,
                                     title: "Mountain9",
                                     message: "2020-09-01")
    
    private var mountain10 = Mountain(isSelected: false,
                                      title: "Mountain10",
                                      message: "2020-09-01")
    
    private var mountain11 = Mountain(isSelected: false,
                                      title: "Mountain11",
                                      message: "2020-09-01")
    
    private var mountain12 = Mountain(isSelected: false,
                                      title: "Mountain12",
                                      message: "2020-09-01")
    
    // MARK: - Properties
    var mountains: [Mountain] = []
    
    var selectedMountains: [Mountain] {
        return mountains.filter { $0.isSelected == true }
    }
    
    // MARK: - Init
    init(mountains: [Mountain] = []) {
        self.mountains = mountains
        
        self.mountains.append(mountain0)
        self.mountains.append(mountain1)
        self.mountains.append(mountain2)
        self.mountains.append(mountain3)
        self.mountains.append(mountain4)
        self.mountains.append(mountain5)
        self.mountains.append(mountain6)
        self.mountains.append(mountain7)
        self.mountains.append(mountain8)
        self.mountains.append(mountain9)
        self.mountains.append(mountain10)
        self.mountains.append(mountain11)
        self.mountains.append(mountain12)
    }
    
    // MARK: - Public Methods
    func setSelectionFor(item: Int, isSelected: Bool) {
        mountains[item].isSelected = isSelected
    }
    
    func removeAllSelections() {
        selectedMountains.forEach { $0.isSelected = false }
    }
}
